package com.ags.logitrack.service;

import com.ags.logitrack.dto.UsuarioRequestDTO;
import com.ags.logitrack.dto.UsuarioResponseDTO;
import com.ags.logitrack.dto.UsuarioUpdateRequestDTO;
import com.ags.logitrack.model.Usuario;
import com.ags.logitrack.repository.UsuarioRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Servi√ßo para gerenciamento de usu√°rios
 * Cont√©m a l√≥gica de neg√≥cio para opera√ß√µes com usu√°rios
 */
@Service
@RequiredArgsConstructor
@Transactional
public class UsuarioService {

   private final UsuarioRepository usuarioRepository;
   private final PasswordEncoder passwordEncoder;

   /**
    * Lista todos os usu√°rios ativos
    * 
    * @return List<UsuarioResponseDTO> lista de usu√°rios
    */
   @Transactional(readOnly = true)
   public List<UsuarioResponseDTO> listarUsuarios() {
      return usuarioRepository.findByAtivoTrue()
            .stream()
            .map(UsuarioResponseDTO::new)
            .collect(Collectors.toList());
   }

   /**
    * Busca um usu√°rio por ID
    * 
    * @param id ID do usu√°rio
    * @return UsuarioResponseDTO dados do usu√°rio
    * @throws RuntimeException se usu√°rio n√£o encontrado
    */
   @Transactional(readOnly = true)
   public UsuarioResponseDTO buscarPorId(Long id) {
      Usuario usuario = usuarioRepository.findById(id)
            .orElseThrow(() -> new RuntimeException("Usu√°rio n√£o encontrado com ID: " + id));
      return new UsuarioResponseDTO(usuario);
   }

   /**
    * Busca um usu√°rio por username
    * 
    * @param username Nome de usu√°rio
    * @return UsuarioResponseDTO dados do usu√°rio
    * @throws RuntimeException se usu√°rio n√£o encontrado
    */
   @Transactional(readOnly = true)
   public UsuarioResponseDTO buscarPorUsername(String username) {
      Usuario usuario = usuarioRepository.findByUsername(username)
            .orElseThrow(() -> new RuntimeException("Usu√°rio n√£o encontrado: " + username));
      return new UsuarioResponseDTO(usuario);
   }

   /**
    * Cria um novo usu√°rio
    * 
    * @param usuarioRequest Dados do usu√°rio a ser criado
    * @return UsuarioResponseDTO usu√°rio criado
    * @throws RuntimeException se username ou email j√° existir
    */
   public UsuarioResponseDTO criarUsuario(UsuarioRequestDTO usuarioRequest) {
      // Verifica se username j√° existe
      if (usuarioRepository.existsByUsername(usuarioRequest.getUsername())) {
         throw new RuntimeException("Nome de usu√°rio j√° existe: " + usuarioRequest.getUsername());
      }

      // Verifica se email j√° existe
      if (usuarioRepository.existsByEmail(usuarioRequest.getEmail())) {
         throw new RuntimeException("Email j√° existe: " + usuarioRequest.getEmail());
      }

      // Cria novo usu√°rio
      Usuario usuario = new Usuario();
      usuario.setUsername(usuarioRequest.getUsername());
      usuario.setEmail(usuarioRequest.getEmail());
      usuario.setPassword(passwordEncoder.encode(usuarioRequest.getPassword()));
      usuario.setNomeCompleto(usuarioRequest.getNomeCompleto());
      usuario.setTelefone(usuarioRequest.getTelefone());
      usuario.setTipoUsuario(usuarioRequest.getTipoUsuario());
      usuario.setAtivo(true);
      usuario.setDataCriacao(LocalDateTime.now());

      Usuario usuarioSalvo = usuarioRepository.save(usuario);
      return new UsuarioResponseDTO(usuarioSalvo);
   }

   /**
    * Atualiza um usu√°rio existente
    * 
    * @param id             ID do usu√°rio
    * @param usuarioRequest Novos dados do usu√°rio
    * @return UsuarioResponseDTO usu√°rio atualizado
    * @throws RuntimeException se usu√°rio n√£o encontrado ou dados inv√°lidos
    */
   public UsuarioResponseDTO atualizarUsuario(Long id, UsuarioRequestDTO usuarioRequest) {
      System.out.println("üîÑ UsuarioService.atualizarUsuario - iniciando:");
      System.out.println("  ID: " + id);
      System.out.println("  Request: " + usuarioRequest);
      
      Usuario usuario = usuarioRepository.findById(id)
            .orElseThrow(() -> new RuntimeException("Usu√°rio n√£o encontrado com ID: " + id));

      System.out.println("  Usuario encontrado: " + usuario.getUsername());

      // Verifica se username j√° existe (excluindo o usu√°rio atual)
      if (!usuario.getUsername().equals(usuarioRequest.getUsername()) &&
            usuarioRepository.existsByUsername(usuarioRequest.getUsername())) {
         throw new RuntimeException("Nome de usu√°rio j√° existe: " + usuarioRequest.getUsername());
      }

      // Verifica se email j√° existe (excluindo o usu√°rio atual)
      if (!usuario.getEmail().equals(usuarioRequest.getEmail()) &&
            usuarioRepository.existsByEmail(usuarioRequest.getEmail())) {
         throw new RuntimeException("Email j√° existe: " + usuarioRequest.getEmail());
      }

      // Atualiza dados
      usuario.setUsername(usuarioRequest.getUsername());
      usuario.setEmail(usuarioRequest.getEmail());
      
      // S√≥ atualiza a senha se foi fornecida e n√£o est√° vazia
      if (usuarioRequest.getPassword() != null && !usuarioRequest.getPassword().trim().isEmpty()) {
         System.out.println("  Atualizando senha...");
         usuario.setPassword(passwordEncoder.encode(usuarioRequest.getPassword()));
      } else {
         System.out.println("  Mantendo senha atual...");
      }
      
      usuario.setNomeCompleto(usuarioRequest.getNomeCompleto());
      usuario.setTelefone(usuarioRequest.getTelefone());
      usuario.setTipoUsuario(usuarioRequest.getTipoUsuario());

      Usuario usuarioSalvo = usuarioRepository.save(usuario);
      UsuarioResponseDTO response = new UsuarioResponseDTO(usuarioSalvo);
      
      System.out.println("‚úÖ Usu√°rio salvo com sucesso: " + response);
      
      return response;
   }

   /**
    * Desativa um usu√°rio (soft delete)
    * 
    * @param id ID do usu√°rio
    * @throws RuntimeException se usu√°rio n√£o encontrado ou for o √∫ltimo admin
    */
   public void desativarUsuario(Long id) {
      Usuario usuario = usuarioRepository.findById(id)
            .orElseThrow(() -> new RuntimeException("Usu√°rio n√£o encontrado com ID: " + id));

      // N√£o permite desativar o √∫ltimo administrador
      if (usuario.getTipoUsuario() == Usuario.TipoUsuario.ADMIN) {
         long totalAdmins = usuarioRepository.countAdministradores();
         if (totalAdmins <= 1) {
            throw new RuntimeException("N√£o √© poss√≠vel desativar o √∫ltimo administrador do sistema");
         }
      }

      usuario.setAtivo(false);
      usuarioRepository.save(usuario);
   }

   /**
    * Reativa um usu√°rio
    * 
    * @param id ID do usu√°rio
    */
   public void reativarUsuario(Long id) {
      Usuario usuario = usuarioRepository.findById(id)
            .orElseThrow(() -> new RuntimeException("Usu√°rio n√£o encontrado com ID: " + id));

      usuario.setAtivo(true);
      usuarioRepository.save(usuario);
   }

   /**
    * Atualiza a data do √∫ltimo acesso do usu√°rio
    * 
    * @param username Nome de usu√°rio
    */
   public void atualizarUltimoAcesso(String username) {
      usuarioRepository.findByUsername(username)
            .ifPresent(usuario -> {
               usuario.setDataUltimoAcesso(LocalDateTime.now());
               usuarioRepository.save(usuario);
            });
   }

   /**
    * Atualiza um usu√°rio existente usando UsuarioUpdateRequestDTO (senha opcional)
    * 
    * @param id             ID do usu√°rio
    * @param usuarioRequest Novos dados do usu√°rio
    * @return UsuarioResponseDTO usu√°rio atualizado
    * @throws RuntimeException se usu√°rio n√£o encontrado ou dados inv√°lidos
    */
   public UsuarioResponseDTO atualizarUsuarioComUpdate(Long id, UsuarioUpdateRequestDTO usuarioRequest) {
      Usuario usuario = usuarioRepository.findById(id)
            .orElseThrow(() -> new RuntimeException("Usu√°rio n√£o encontrado com ID: " + id));

      // Verifica se username j√° existe (excluindo o usu√°rio atual)
      if (!usuario.getUsername().equals(usuarioRequest.getUsername()) &&
            usuarioRepository.existsByUsername(usuarioRequest.getUsername())) {
         throw new RuntimeException("Nome de usu√°rio j√° existe: " + usuarioRequest.getUsername());
      }

      // Verifica se email j√° existe (excluindo o usu√°rio atual)
      if (!usuario.getEmail().equals(usuarioRequest.getEmail()) &&
            usuarioRepository.existsByEmail(usuarioRequest.getEmail())) {
         throw new RuntimeException("Email j√° existe: " + usuarioRequest.getEmail());
      }

      // Atualiza dados
      usuario.setUsername(usuarioRequest.getUsername());
      usuario.setEmail(usuarioRequest.getEmail());
      
      // S√≥ atualiza a senha se foi fornecida
      if (usuarioRequest.getPassword() != null && !usuarioRequest.getPassword().trim().isEmpty()) {
         usuario.setPassword(passwordEncoder.encode(usuarioRequest.getPassword()));
      }
      
      usuario.setNomeCompleto(usuarioRequest.getNomeCompleto());
      usuario.setTelefone(usuarioRequest.getTelefone());
      usuario.setTipoUsuario(usuarioRequest.getTipoUsuario());

      Usuario usuarioSalvo = usuarioRepository.save(usuario);
      return new UsuarioResponseDTO(usuarioSalvo);
   }

   /**
    * Verifica se um usu√°rio √© administrador
    * 
    * @param username Nome de usu√°rio
    * @return boolean true se for admin
    */
   @Transactional(readOnly = true)
   public boolean isAdmin(String username) {
      return usuarioRepository.findByUsername(username)
            .map(usuario -> usuario.getTipoUsuario() == Usuario.TipoUsuario.ADMIN)
            .orElse(false);
   }
}
